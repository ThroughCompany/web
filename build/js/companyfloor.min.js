(function() {
    "use strict";
    var system = angular.module("system", [ "ngCookies", "ngResource", "ui.bootstrap", "ui.router", "ng-bs-animated-button", "ui.bootstrap.datetimepicker", "ngStorage", "ngAnimate", "system.app", "system.app.user" ]);
    system.config([ "$locationProvider", function($locationProvider) {
        $locationProvider.html5Mode(true);
    } ]);
    system.config([ "$httpProvider", function($httpProvider) {
        $httpProvider.defaults.useXDomain = true;
        $httpProvider.interceptors.push("authInterceptor");
    } ]);
    system.run([ "$rootScope", "$state", "menuService", "authService", "regexService", "routes", function($rootScope, $state, menuService, authService, regexService, routes) {
        $rootScope.menu = menuService.init();
        $rootScope.regexes = regexService;
        $rootScope.auth = authService;
        $rootScope.routes = routes;
        $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {});
        $rootScope.$on("$viewContentLoaded", function(event, toState, toParams, fromState, fromParams) {});
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").config([ "$httpProvider", function($httpProvider) {
        var interceptor = [ "$location", "$q", "$window", function($location, $q, $window) {
            return {
                request: function(config) {
                    config.headers = config.headers || {};
                    if ($window.sessionStorage.token) {
                        config.headers["x-access-token"] = $window.sessionStorage.token;
                    }
                    return config;
                }
            };
        } ];
        $httpProvider.interceptors.push(interceptor);
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").controller("errorController", [ "$scope", function($scope) {} ]);
})();

(function() {
    "use strict";
    angular.module("system").controller("homeController", [ "$scope", function($scope) {} ]);
})();

(function() {
    "use strict";
    angular.module("system").controller("loginController", [ "$scope", "authService", "$state", "routes", "$timeout", function($scope, authService, $state, routes, $timeout) {
        $scope.form = {};
        if (authService.isLoggedIn()) {
            $state.go("system.app.user");
        }
        $scope.login = function(loginForm) {
            $scope.submitted = true;
            if (!loginForm.$valid) return;
            $scope.loggingIn = true;
            $scope.signinFail = false;
            $scope.signinSuccess = false;
            $timeout(function() {
                authService.login($scope.form.email, $scope.form.password).then(function success(response) {
                    $scope.loggingIn = false;
                    $scope.signinSuccess = true;
                    $scope.signinFail = false;
                    $scope.signinSuccessMsg = "Log in successful";
                    $timeout(function() {
                        $state.transitionTo(routes.userDashboard);
                    }, 500);
                }, function error(response) {
                    $scope.loggingIn = false;
                    $scope.signinSuccess = false;
                    $scope.signinFail = true;
                    $scope.signinFailMsg = response.data.errors.message;
                });
            }, 500);
        };
        $scope.loginFacebook = function($event) {
            $event.preventDefault();
            $scope.loggingInFacebook = true;
            authService.loginFacebook().then(function success(response) {
                $timeout(function() {
                    $state.transitionTo(routes.userDashboard);
                }, 500);
            }, function error(response) {
                $scope.loggingInFacebook = false;
                $scope.loginFacebookError = true;
                $timeout(function() {
                    $scope.loginFacebookError = false;
                }, 2500);
            });
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").controller("registerController", [ "$scope", "$state", "userEntityService", "routes", "$timeout", function($scope, $state, userEntityService, routes, $timeout) {
        $scope.form = {};
        $scope.register = function(registerForm) {
            $scope.submitted = true;
            if (!registerForm.$valid) return;
            userEntityService.create($scope.form.email, $scope.form.emailConfirmation, $scope.form.password).then(function success(response) {
                $scope.registerSuccess = true;
                $scope.registerFail = false;
                $scope.registerSuccessMsg = "Account created";
                $timeout(function() {
                    $state.transitionTo(routes.userDashboard);
                }, 1e3);
            }, function error(response) {
                if (response.status === 400) {
                    $scope.registerFail = true;
                    $scope.registerFailMsg = response.data.errors.message;
                }
            });
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").controller("systemController", [ "$scope", "$rootScope", function($scope, $rootScope) {} ]);
})();

(function() {
    "use strict";
    angular.module("system").directive("uiSrefName", [ "$compile", function($compile) {
        return {
            restrict: "A",
            priority: 1e3,
            compile: function(element) {
                element.removeAttr("ui-sref-name");
                element.removeAttr("data-ui-sref-name");
                return {
                    pre: function preLink($scope, element, attrs, controller) {
                        var rawValue = attrs.uiSrefName;
                        var params = rawValue.indexOf("({") != -1 ? rawValue.substring(rawValue.indexOf("({"), rawValue.length) : "";
                        var value;
                        if (params) {
                            value = $scope.$eval(rawValue.substring(rawValue.indexOf("({"), 0));
                            value += params;
                        } else {
                            value = $scope.$eval(attrs.uiSrefName);
                        }
                        console.log(value);
                        element.attr("ui-sref", value);
                        $compile(element)($scope);
                    }
                };
            }
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").config([ "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise("/404");
        $urlRouterProvider.when("/", "/home");
        $stateProvider.state("system", {
            url: "/",
            templateUrl: "/js/views/system.html",
            controller: "systemController"
        }).state("system.home", {
            url: "home",
            templateUrl: "/js/views/home.html",
            controller: "homeController"
        }).state("system.login", {
            url: "login",
            templateUrl: "/js/views/login.html",
            controller: "loginController"
        }).state("system.register", {
            url: "register",
            templateUrl: "/js/views/register.html",
            controller: "registerController"
        }).state("system.404", {
            url: "404",
            templateUrl: "/js/views/404.html",
            controller: "errorController"
        });
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").constant("appSettings", {
        baseUrl: "http://localhost:3000"
    });
})();

(function() {
    "use strict";
    angular.module("system").factory("authInterceptor", [ "$rootScope", "$q", "$window", function($rootScope, $q, $window) {
        return {
            request: function(config) {
                config.headers = config.headers || {};
                if ($window.sessionStorage.token) {
                    config.headers["x-access-token"] = $window.sessionStorage.token;
                }
                return config;
            },
            response: function(response) {
                if (response.status === 401) {}
                return response || $q.when(response);
            }
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").factory("authService", [ "$rootScope", "$window", "$http", "$q", "appSettings", "$state", function($rootScope, $window, $http, $q, appSettings, $state) {
        var authService = {}, tokenExpires = null;
        authService.hasCompanyClaim = function(userClaims, claim, companyId) {
            return userClaims[claim + "-" + companyId];
        };
        authService.login = function(email, password) {
            return $http.post(appSettings.baseUrl + "/auth/credentials", {
                email: email,
                password: password
            }).then(function success(response) {
                if (!response || !response.data) return $q.reject(response);
                $window.sessionStorage.token = response.data.token;
                $window.sessionStorage.userId = response.data.user._id;
                tokenExpires = new Date(response.data.expires);
                $rootScope.user = response.data.user;
                return response;
            });
        };
        authService.loginFacebook = function() {
            var deferred = $q.defer();
            var accessToken;
            var fbToken;
            FB.login(function(response) {
                if (response && response.authResponse) {
                    accessToken = response.authResponse.accessToken;
                    deferred.resolve(accessToken);
                } else {
                    deferred.reject(response);
                }
            }, {
                scope: [ "public_profile", "email", "user_friends" ]
            });
            return deferred.promise.then(function authenticateWithApi(token) {
                fbToken = token;
                return $http.post(appSettings.baseUrl + "/auth/facebook", {
                    facebookAccessToken: token
                });
            }, function error(response) {
                return response;
            }).then(function storeToken(response) {
                if (!response || !response.data) return $q.reject(response);
                $window.sessionStorage.token = response.data.token;
                $window.sessionStorage.userId = response.data.user._id;
                $window.sessionStorage.fbToken = fbToken;
                tokenExpires = new Date(response.data.expires);
                $rootScope.user = response.data.user;
                return response;
            }, function error(response) {
                return response;
            });
        };
        authService.logout = function() {
            if ($window.sessionStorage.fbToken) FB.logout(function() {});
            delete $window.sessionStorage.token;
            delete $window.sessionStorage.userId;
            delete $window.sessionStorage.fbToken;
            $state.transitionTo("system");
        };
        authService.getToken = function() {
            return $window.sessionStorage.token;
        };
        authService.getUserId = function() {
            return $window.sessionStorage.userId;
        };
        authService.authTokenExpired = function() {
            return authTokenExpires <= Date.now();
        };
        authService.isLoggedIn = function() {
            return authService.getToken() && authService.getToken().length && (authService.getUserId() && authService.getUserId().length);
        };
        return authService;
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").factory("menuService", [ "$rootScope", "$state", "$window", "routes", function($rootScope, $state, $window, routes) {
        var processNodes = function(nodes, parentNode) {
            _.each(nodes, function(node) {
                node.parent = parentNode;
                if (node.childNodes && node.childNodes.length > 0) processNodes(node.childNodes, node);
            });
        };
        var deactivateNodes = function(nodes) {
            _.each(nodes, function(node) {
                node.active = false;
                if (node.childNodes && node.childNodes.length > 0) {
                    deactivateNodes(node.childNodes);
                }
            });
        };
        var getActiveNode = function(nodes, state) {
            var activeNode = null;
            _.each(nodes, function(node) {
                if (activeNode) return activateNode;
                if (node.state === state) {
                    activeNode = node;
                } else if (node.childNodes && node.childNodes.length > 0) {
                    activeNode = getActiveNode(node.childNodes, state);
                }
            });
            return activeNode;
        };
        var getActiveRootNode = function(activeNode) {
            if (activeNode.parent) {
                return getActiveRootNode(activeNode.parent);
            } else return activeNode;
        };
        var activateNode = function(nodes, state) {
            var activeNode = getActiveNode(nodes, state);
            if (activeNode) activeNode.active = true;
            return activeNode;
        };
        var activateParentNodes = function(node) {
            if (node.parent) {
                node.parent.active = true;
                activateParentNodes(node.parent);
            }
        };
        var addGroupMenuNodes = function(menu) {
            var groupMenuNodes = [ {
                title: "Company",
                icon: "fa fa-building-o",
                state: routes.userCompanyDashboard,
                childNodes: [ {
                    title: "Dashboard",
                    icon: "fa fa-dashboard",
                    state: routes.userCompanyDashboard
                }, {
                    title: "Foundation",
                    icon: "fa fa-cubes",
                    state: "app.company.foundation"
                }, {
                    title: "People",
                    icon: "fa fa-users",
                    state: "app.company.people",
                    childNodes: [ {
                        title: "Ownership",
                        icon: "fa fa-dashboard",
                        state: "app.company.people.ownership"
                    }, {
                        title: "Management",
                        icon: "fa fa-dashboard",
                        state: "app.company.people.management"
                    } ]
                }, {
                    title: "Docs",
                    icon: "fa fa-file-word-o",
                    state: "app.company.docs"
                }, {
                    title: "Users",
                    icon: "fa fa-paw",
                    state: "app.company.users"
                } ]
            } ];
            processNodes(groupMenuNodes);
            menu.nodes.push(groupMenuNodes[0]);
        };
        var removeGroupMenuNodes = function(menu) {
            var companyNode = _.find(menu.nodes, function(node) {
                return node.state === "app.company";
            });
            var indexOfcompanyNode = _.indexOf(menu.nodes, companyNode);
            menu.nodes.splice(indexOfcompanyNode, 1);
        };
        return {
            init: function() {
                var baseTitle = "Through Company";
                var menuNodes = [ {
                    title: "Dashboard",
                    icon: "fa fa-user",
                    state: routes.userDashboard,
                    childNodes: [ {
                        title: "Dashboard",
                        icon: "fa fa-dashboard",
                        state: routes.userDashboard
                    }, {
                        title: "Settings",
                        icon: "fa fa-gear",
                        state: routes.userSettings
                    } ]
                } ];
                processNodes(menuNodes);
                var activeNode = activateNode(menuNodes, $state.current.name);
                var activeRootNode = null;
                if (activeNode) {
                    $window.document.title = baseTitle + " | " + activeNode.title;
                    activeRootNode = getActiveRootNode(activeNode);
                }
                var menu = {
                    nodes: menuNodes,
                    activeNode: activeNode,
                    activeRootNode: activeRootNode
                };
                $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
                    deactivateNodes(menu.nodes);
                    var activeNode = activateNode(menu.nodes, toState.name);
                    if (activeNode) {
                        activateParentNodes(activeNode);
                        menu.activeNode = activeNode;
                        menu.activeRootNode = getActiveRootNode(activeNode);
                        $window.document.title = baseTitle + " | " + activeNode.title;
                    } else {
                        menu.activeNode = null;
                        menu.activeRootNode = null;
                    }
                });
                return menu;
            }
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").factory("regexService", [ function() {
        return {
            email: new RegExp(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/),
            date: new RegExp(/^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/)
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").constant("routes", {
        home: "system.home",
        login: "system.login",
        register: "system.register",
        userDashboard: "system.app.user.dashboard",
        userSettings: "system.app.user.settings",
        userCreateCompany: "system.app.user.createcompany",
        userCompanyDashboard: "system.app.user.company.dashboard",
        userCompanySettings: "system.app.user.company.settings",
        userCompanyAppointBoardMember: "system.app.user.company.appointboardmember",
        userCompanyAddShares: "system.app.user.company.addShares",
        userCompanyAddRound: "system.app.user.company.addRound",
        userCompanyInviteUser: "system.app.user.company.inviteuser"
    });
})();

(function() {
    "use strict";
    var app = angular.module("system.app", []);
})();

(function() {
    "use strict";
    angular.module("system").factory("lookupEntityService", [ "$resource", "appSettings", function($resource, appSettings) {
        var CompanyType = $resource(appSettings.baseUrl + "/companyTypes");
        var State = $resource(appSettings.baseUrl + "/states", null, {
            query: {
                isArray: true,
                transformResponse: function(data, headers) {
                    return angular.fromJson(data).map(function(state) {
                        return {
                            name: state
                        };
                    });
                }
            }
        });
        var LookupEntityService = function() {};
        LookupEntityService.prototype.getCompanyTypes = function() {
            return CompanyType.query().$promise;
        };
        LookupEntityService.prototype.getStates = function() {
            return State.query().$promise;
        };
        return new LookupEntityService();
    } ]);
})();

(function() {
    "use strict";
    angular.module("system").factory("userEntityService", [ "$resource", "appSettings", function($resource, appSettings) {
        var User = $resource(appSettings.baseUrl + "/users", null, {
            create: {
                method: "POST",
                url: appSettings.baseUrl + "/users"
            },
            getUserById: {
                method: "GET",
                url: appSettings.baseUrl + "/users/:userId"
            },
            updateUserById: {
                method: "PATCH",
                url: appSettings.baseUrl + "/users/:userId",
                params: {
                    userId: "@userId"
                }
            },
            getUserClaims: {
                method: "GET",
                url: appSettings.baseUrl + "/users/:userId/claims"
            },
            getUserCompanies: {
                method: "GET",
                url: appSettings.baseUrl + "/users/:userId/companies",
                isArray: true
            },
            getUserCompanyById: {
                method: "GET",
                url: appSettings.baseUrl + "/users/:userId/companies/:companyId"
            },
            createUserCompany: {
                method: "POST",
                url: appSettings.baseUrl + "/users/:userId/companies",
                params: {
                    userId: "@userId"
                }
            },
            updateUserCompanyById: {
                method: "PATCH",
                url: appSettings.baseUrl + "/users/:userId/companies/:companyId",
                params: {
                    userId: "@userId",
                    companyId: "@companyId"
                }
            },
            getUserCompanyUsers: {
                method: "GET",
                url: appSettings.baseUrl + "/users/:userId/companies/:companyId/users",
                isArray: true,
                params: {
                    userId: "@userId",
                    companyId: "@companyId"
                }
            },
            addUserCompanyUser: {
                method: "POST",
                url: appSettings.baseUrl + "/users/:userId/companies/:companyId/users",
                params: {
                    userId: "@userId",
                    companyId: "@companyId"
                }
            }
        });
        var UserEntityService = function() {};
        UserEntityService.prototype.create = function(email, emailConfirmation, password) {
            if (!email) throw new Error("email is required");
            if (!emailConfirmation) throw new Error("emailConfirmation is required");
            if (!password) throw new Error("password is required");
            var self = this;
            return User.create({
                email: email,
                emailConfirmation: emailConfirmation,
                password: password
            }).$promise;
        };
        UserEntityService.prototype.getUserById = function(id) {
            if (!id) throw new Error("id is required");
            var self = this;
            return User.getUserById({
                userId: id
            }).$promise;
        };
        UserEntityService.prototype.updateUserById = function(id, updates) {
            if (!id) throw new Error("id is required");
            if (!updates) throw new Error("updates is required");
            var self = this;
            updates.userId = id;
            return User.updateUserById(updates).$promise;
        };
        UserEntityService.prototype.getUserCompanyById = function(id, companyId) {
            if (!id) throw new Error("id is required");
            if (!companyId) throw new Error("companyId is required");
            var self = this;
            return User.getUserCompanyById({
                userId: id,
                companyId: companyId
            }).$promise;
        };
        UserEntityService.prototype.createUserCompany = function(id, name, companyType, stateOfIncorporation, authorizedSharesCommonStock, parValueCommonStock, preferredStock) {
            if (!id) throw new Error("id is required");
            if (!name) throw new Error("name is required");
            if (!companyType) throw new Error("companyType is required");
            if (!stateOfIncorporation) throw new Error("stateOfIncorporation is required");
            if (!authorizedSharesCommonStock) throw new Error("authorizedSharesCommonStock is required");
            if (!parValueCommonStock) throw new Error("parValueCommonStock is required");
            if (!preferredStock) throw new Error("preferredStock is required");
            var self = this;
            return User.createUserCompany({
                userId: id,
                name: name,
                type: companyType,
                stateOfIncorporation: stateOfIncorporation,
                authorizedSharesCommonStock: authorizedSharesCommonStock,
                parValueCommonStock: parValueCommonStock,
                preferredStock: preferredStock
            }).$promise;
        };
        UserEntityService.prototype.updateUserCompanyById = function(id, companyId, updates) {
            if (!id) throw new Error("id is required");
            if (!companyId) throw new Error("companyId is required");
            if (!updates) throw new Error("updates is required");
            var self = this;
            updates.userId = id;
            updates.companyId = companyId;
            return User.updateUserCompanyById(updates).$promise;
        };
        UserEntityService.prototype.getUserCompanies = function(id) {
            if (!id) throw new Error("id is required");
            var self = this;
            return User.getUserCompanies({
                userId: id
            }).$promise;
        };
        UserEntityService.prototype.getUserClaims = function(id) {
            if (!id) throw new Error("id is required");
            var self = this;
            return User.getUserClaims({
                userId: id
            }).$promise;
        };
        UserEntityService.prototype.getUserCompanyUsers = function(id, companyId) {
            if (!id) throw new Error("id is required");
            if (!companyId) throw new Error("companyId is required");
            var self = this;
            return User.getUserCompanyUsers({
                userId: id,
                companyId: companyId
            }).$promise;
        };
        UserEntityService.prototype.addUserCompanyUser = function(id, companyId, email, emailConfirmation) {
            if (!id) throw new Error("id is required");
            if (!companyId) throw new Error("companyId is required");
            if (!email) throw new Error("email is required");
            if (!emailConfirmation) throw new Error("emailConfirmation is required");
            var self = this;
            return User.addUserCompanyUser({
                userId: id,
                companyId: companyId,
                email: email,
                emailConfirmation: emailConfirmation
            }).$promise;
        };
        return new UserEntityService();
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app").config([ "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
        $stateProvider.state("system.app", {
            url: "app",
            templateUrl: "/js/components/app/views/app.html",
            controller: "appController",
            resolve: {
                user: [ "userEntityService", "authService", function(userEntityService, authService) {
                    return userEntityService.getUserById(authService.getUserId());
                } ],
                userClaims: [ "userEntityService", "authService", function(userEntityService, authService) {
                    return userEntityService.getUserClaims(authService.getUserId());
                } ],
                states: [ "lookupEntityService", function(lookupEntityService) {
                    return lookupEntityService.getStates();
                } ]
            },
            data: {
                authenticate: true
            }
        });
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app").controller("appController", [ "$scope", "$rootScope", "$state", "user", "userClaims", "states", function($scope, $rootScope, $state, user, userClaims, states) {
        $rootScope.user = user;
        $rootScope.userClaims = userClaims;
        $rootScope.states = states;
    } ]);
})();

(function() {
    "use strict";
    var user = angular.module("system.app.user", []);
})();

(function() {
    "use strict";
    angular.module("system.app.user").config([ "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.when("/app", "/app/user/dashboard");
        $urlRouterProvider.when("/app/user", "/app/user/dashboard");
        $stateProvider.state("system.app.user", {
            url: "/user",
            template: "<ui-view/>",
            controller: "userController"
        }).state("system.app.user.dashboard", {
            url: "/dashboard",
            templateUrl: "/js/components/app/components/user/views/userDashboard.html",
            controller: "userDashboardController",
            resolve: {
                userCompanies: [ "user", "userEntityService", function(user, userEntityService) {
                    return userEntityService.getUserCompanies(user._id);
                } ]
            }
        }).state("system.app.user.createcompany", {
            url: "/companies/create",
            templateUrl: "/js/components/app/components/user/views/userCreateCompany.html",
            controller: "userCreateCompanyController",
            resolve: {
                companyTypes: [ "lookupEntityService", function(lookupEntityService) {
                    return lookupEntityService.getCompanyTypes();
                } ],
                states: [ "lookupEntityService", function(lookupEntityService) {
                    return lookupEntityService.getStates();
                } ]
            }
        }).state("system.app.user.settings", {
            url: "/settings",
            templateUrl: "/js/components/app/components/user/views/userSettings.html",
            controller: "userSettingsController"
        });
        $stateProvider.state("system.app.user.company", {
            url: "/company/:companyId",
            template: "<ui-view/>",
            controller: "userCompanyController",
            resolve: {
                company: [ "$stateParams", "userEntityService", "user", function($stateParams, userEntityService, user) {
                    return userEntityService.getUserCompanyById(user._id, $stateParams.companyId);
                } ],
                companyUsers: [ "$rootScope", "$stateParams", "authService", "userEntityService", "user", "userClaims", "company", function($rootScope, $stateParams, authService, userEntityService, user, userClaims, company) {
                    if (authService.hasCompanyClaim(userClaims, "View-Company-Users", company._id)) {
                        return userEntityService.getUserCompanyUsers(user._id, company._id);
                    } else return null;
                } ]
            }
        }).state("system.app.user.company.dashboard", {
            url: "/dashboard",
            templateUrl: "/js/components/app/components/user/views/userCompanyDashboard.html",
            controller: "userCompanyDashboardController"
        }).state("system.app.user.company.settings", {
            url: "/settings",
            templateUrl: "/js/components/app/components/user/views/userCompanySettings.html",
            controller: "userCompanySettingsController"
        }).state("system.app.user.company.appointboardmember", {
            url: "/board/appoint",
            templateUrl: "/js/components/app/components/user/views/userCompanyAppointBoardMember.html",
            controller: "userCompanyAppointBoardMemberController"
        }).state("system.app.user.company.inviteuser", {
            url: "/users/add",
            templateUrl: "/js/components/app/components/user/views/userCompanyInviteUser.html",
            controller: "userCompanyInviteUserController"
        }).state("system.app.user.company.addshares", {
            url: "/shares/add",
            templateUrl: "/js/components/app/components/user/views/userCompanyAddShares.html",
            controller: "userCompanyAddSharesController"
        }).state("system.app.user.company.addround", {
            url: "/rounds/add",
            templateUrl: "/js/components/app/components/user/views/userCompanyAddRound.html",
            controller: "userCompanyAddRoundController"
        });
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userCompanyAddRoundController", [ "$scope", function($scope) {} ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userCompanyAddSharesController", [ "$scope", function($scope) {} ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userCompanyAppointBoardMemberController", [ "$scope", function($scope) {
        $scope.form = {};
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userCompanyController", [ "$scope", "company", "companyUsers", function($scope, company, companyUsers) {
        $scope.company = company;
        $scope.companyUsers = companyUsers;
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userCompanyDashboardController", [ "$scope", "userEntityService", function($scope, userEntityService) {} ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userCompanyInviteUserController", [ "$scope", "userEntityService", function($scope, userEntityService) {
        $scope.form = {};
        $scope.inviteUser = function(inviteCompanyUserForm) {
            $scope.submitted = true;
            if (!inviteCompanyUserForm.$valid) return;
            userEntityService.addUserCompanyUser($scope.user._id, $scope.company._id, $scope.form.email, $scope.form.emailConfirmation).then(function success(response) {
                alert("yyyyeeeea hawwwww");
            });
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userCompanySettingsController", [ "$scope", "userEntityService", function($scope, userEntityService) {
        $scope.form = {
            dateOfIncorporationUnformatted: $scope.company.dateOfIncorporation
        };
        $scope.$watch("form.dateOfIncorporationUnformatted", function(newValue) {
            if (newValue) {
                $scope.form.dateOfIncorporation = moment(newValue).format("MM/DD/YYYY");
            }
        });
        $scope.isSubmitting = null;
        $scope.result = null;
        $scope.btnOptions = {
            buttonSubmittingIcon: "fa fa-refresh",
            buttonSuccessIcon: "fa fa-check",
            buttonDefaultText: "Save"
        };
        $scope.updateUserCompany = function(updateUserCompanyForm) {
            $scope.submitted = true;
            if (!updateUserCompanyForm.$valid) return;
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userController", [ "$scope", function($scope) {} ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userCreateCompanyController", [ "$scope", "$state", "$timeout", "userEntityService", "companyTypes", "routes", function($scope, $state, $timeout, userEntityService, companyTypes, routes) {
        $scope.currentStep = 1;
        $scope.form = {
            dateOfIncorporationUnformatted: null,
            preferredStocks: []
        };
        $scope.$watch("form.dateOfIncorporationUnformatted", function(newValue) {
            if (newValue) {
                $scope.form.dateOfIncorporation = moment(newValue).format("MM/DD/YYYY");
            }
        });
        $scope.companyTypes = companyTypes;
        $scope.form.selectedCompanyType = $scope.companyTypes[0].type;
        $scope.goToStep = function(step, $event) {
            $event.preventDefault();
            if (step === 1) {
                $scope.currentStep = 1;
                return;
            } else if (step === 2) {
                if ($scope.form.selectedState) {
                    $scope.currentStep = 2;
                    return;
                }
                return;
            } else {
                if ($scope.form.selectedState && $scope.form.name) {
                    $scope.currentStep = 3;
                    return;
                }
                return;
            }
        };
        $scope.goToStep2 = function(createUserCompanyForm1) {
            $scope.submitted = true;
            if (!createUserCompanyForm1.$valid) return;
            $scope.currentStep = 2;
            $scope.submitted = false;
        };
        $scope.goToStep3 = function(createUserCompanyForm2) {
            $scope.submitted = true;
            if (!createUserCompanyForm2.$valid) return;
            $scope.currentStep = 3;
            $scope.submitted = false;
        };
        $scope.goToStep4 = function(createUserCompanyForm3) {
            $scope.submitted = true;
            if (!createUserCompanyForm3.$valid) return;
            $scope.currentStep = 4;
            $scope.submitted = false;
        };
        $scope.addPreferredStock = function(createUserCompanyForm4) {
            $scope.submitted = true;
            if (!createUserCompanyForm4.$valid) return;
            $scope.form.preferredStocks.push({
                name: $scope.form.preferredStockName,
                amount: $scope.form.preferredStockAmount
            });
            $scope.form.preferredStockName = null;
            $scope.form.preferredStockAmount = null;
            $scope.submitted = false;
        };
        $scope.removePreferredStock = function(stock, $event) {
            $event.preventDefault();
            $scope.form.preferredStocks.splice($scope.form.preferredStocks.indexOf(stock), 1);
        };
        $scope.createUserCompany = function() {
            userEntityService.createUserCompany($scope.user._id, $scope.form.name, $scope.form.selectedCompanyType, $scope.form.selectedState.name, $scope.form.commonStock, $scope.form.parValue, $scope.form.preferredStocks).then(function success(response) {
                $timeout(function() {
                    $state.transitionTo(routes.userCompanyDashboard, {
                        companyId: response._id
                    });
                }, 500);
            });
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userDashboardController", [ "$scope", "userCompanies", function($scope, userCompanies) {
        $scope.companies = userCompanies;
    } ]);
})();

(function() {
    "use strict";
    angular.module("system.app.user").controller("userSettingsController", [ "$scope", "userEntityService", function($scope, userEntityService) {
        $scope.isSubmitting = null;
        $scope.result = null;
        $scope.btnOptions = {
            buttonSubmittingIcon: "fa fa-refresh",
            buttonSuccessIcon: "fa fa-check",
            buttonDefaultText: "Save"
        };
        $scope.updateUserSettings = function() {
            $scope.isSubmitting = true;
            userEntityService.updateUserById($scope.user._id, {
                firstname: $scope.user.firstname,
                lastname: $scope.user.lastname
            }).then(function success(response) {
                $scope.result = "success";
            }, function error(response) {
                $scope.result = "error";
            });
        };
    } ]);
})();